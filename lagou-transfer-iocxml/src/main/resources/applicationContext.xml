<?xml version="1.0" encoding="UTF-8"?>
<!-- 根标签beans，里面配置一个又一个bean子标签，每一个bean子标签代表一个类的配置 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--id标识对象，class标识类的全限定类名-->

    <!-- scope: 定义bean的作用范围
                singleton: 单例, IOC 容器只有一个该类对象, 默认singleton
                prototype: 原型(多例), 每次使用该类的对象(getBean), 都会返回一个新的对象
    -->

    <bean id="accountDao" class="com.lagou.edu.dao.impl.JdbcAccountDaoImpl" scope="singleton" init-method="init" destroy-method="destory">
        <!-- set 注入使用property标签，如果注入的是另外一个bean则用ref属性，如果注入的是一个普通值则用value属性 -->
        <property name="ConnectionUtils" ref="connectionUtils"></property>
        <!--<property name="name" value="zhangsan"/>
        <property name="sex" value="1"/>
        <property name="money" value="100.3"/>-->

        <!--<constructor-arg index="0" ref="connectionUtils"/>
        <constructor-arg index="1" value="zhangsan"/>
        <constructor-arg index="2" value="1"/>
        <constructor-arg index="3" value="100.2"/>-->

        <!--name: 按照参数名称注入，index按照参数索引位置注入(很少使用)-->
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
        <constructor-arg name="name" value="zhangsan"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="money" value="100.2"/>


        <!--单列可以互换(数组和set)，键值对也可以互换(map和property)-->
        <property name="myArray">
            <array>
                <value>array1</value>
                <value>array2</value>
                <value>array3</value>
            </array>
        </property>

        <property name="myMap">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
                <entry key="key3" value="value3"/>
            </map>
        </property>

        <property name="mySet">
            <set>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>
        
        <property name="myProperties">
            <props>
                <prop key="prop1">value1</prop>
                <prop key="prop2">value2</prop>
            </props>
        </property>

        

    </bean>
    <bean id="transferService" class="com.lagou.edu.service.impl.TransferServiceImpl">
        <!--set + name 之后锁定到传值的set方法了, 通过反射可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao"></property>
    </bean>

    <!--配置新增的三个bean-->
   <!-- <bean id="connectionUtils" class="com.lagou.edu.utils.ConnectionUtils"></bean>-->

    <!--事务管理器-->
    <bean id="transactionManager" class="com.lagou.edu.utils.TransactionManager">
        <property name="ConnectionUtils" ref="connectionUtils"></property>
    </bean>

    <!--代理对象工厂-->
    <bean id="proxyFactory" class="com.lagou.edu.factory.ProxyFactory">
        <property name="TransactionManager" ref="transactionManager"></property>
    </bean>

    <!--Spring ioc 实例化Bean的三种方式-->
    <!--方法一：使用无参构造器 (推荐)-->
    <!--<bean id="connectionUtils" class="com.lagou.edu.utils.ConnectionUtils"></bean>-->

    <!-- 另外两种方式是为了new的对象加入到SpringIOC容器管理 -->
    <!-- 方法二: 静态方法 -->
    <!--<bean id="connectionUtils" class="com.lagou.edu.factory.CreateBeanFactory" factory-method="getInstanceStatic"></bean>-->

    <!-- 方法三: 实例化方法 -->
    <bean id="createBeanFactory" class="com.lagou.edu.factory.CreateBeanFactory"/>
    <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"/>

</beans>